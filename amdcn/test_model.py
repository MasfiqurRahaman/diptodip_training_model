import keras
from keras.models import Model
import numpy as np
import os
import sys
from common import *
import cv2
import h5py
from tqdm import trange
import models
import argparse
from generators import ImageGenerator

parser = argparse.ArgumentParser(description='Test a model on a dataset.')

# paths
parser.add_argument('--data_path', default='test.hdf5',
                    help='Input path for preprocessed data and labels')
parser.add_argument('--model_path', default='model.hdf5',
                    help='Input path for model weights')
parser.add_argument('--output_path', default='output/',
                    help='Output path for images generated by model')


# model specification
parser = models.add_arguments(parser)

# GPU usage
parser.add_argument('--gpu_frac', type=float, default=0.,
                    help='Fraction of GPU memory to allocate (TensorFlow only)')

args = parser.parse_args()

# Set GPU usage
if args.gpu_frac > 0:
    set_gpu_memory_fraction(args.gpu_frac)

# Open data file
print("[r] reading data")
f = h5py.File(args.data_path, "r")
X = f["data"]
y = f["label"]
ignore = None
if 'ignore' in f.keys():
    ignore = f["ignore"]

m = models.get_model(args)
pad = m.get_padding()

# Create model
print("[i] creating model")
model = m.get_model(X.shape[1:4])
model.load_weights(args.model_path)

# Test model
gen = ImageGenerator()

print("[i] testing model")
y_predict = model.predict_generator(gen.flow(X,y, 0, 0, None), X.shape[0])

# Output results
output_path = args.output_path
print("[o] outputting images")
for i in range(y_predict.shape[0]):
    if ignore is not None:
        cv2.imwrite("{}/{:5d}_predict.png".format(output_path, i),categorical_to_image(y_predict[i,:,:,:],ignore[i,:,:]))
        cv2.imwrite("{}/{:5d}_label.png".format(output_path, i),categorical_to_image(y[i,:,:,:],ignore[i,:,:]))
    else:
        true_count = np.sum(y[i])
        unscaled_prediction = np.sum(y_predict[i])
        predicted_count = np.sum(y_predict[i])/255.
        # print((true_count,predicted_count))
        cv2.imwrite("{}/{:5d}_image.png".format(output_path, i),ushort_to_image(X[i,:,:,:]))
        np.save("{}/{:5d}_predict.npy".format(output_path, i), y_predict[i,:,:,:]/255.)
        np.save("{}/{:5d}_label.npy".format(output_path, i), y[i,:,:])
f.close()
